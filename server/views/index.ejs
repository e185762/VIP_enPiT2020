<!DOCTYPE html>
<html lang="ja">
 <head>
 <link rel="stylesheet" type="text/css" href="style.css">
 <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
 <meta charset="utf-8">
   <title>[DFS]~designed fashion selenes~</title>
 </head>
 <body>

	<center>
    <h1 class="text">ようこそ！</h1><br>
    <p class="text">このサイトは自分のデザインから類似した服を見つけることができます</p><br>
    <h2 class="text">まずは自分のイメージする洋服を描いてみよう</h2>
  </center>

  <div>
    <canvas id="canvas" width="640px" height="640px">残念ながらHTML5に対応していません
  </div>
  <div>
    <img class="arrow" id="prevCanvas" src="prev.png">
    <img class="arrow" id="nextCanvas" src="next.png"><br>
    <input class="inputColor" id="inputColor" type="color" value="#ff0000"><br>
    <button class="warm-color" id="warm-color">あたたかい色</button><br>
    <button class="cold-color" id="cold-color">つめたい色</button><br><br>
    <img class="icon-button large" id="eraser" src="eraser.png">
    <img class="icon-button large" id="fillColor" src="pail.png"><br>
    <button class="icon-button small" id="pen-s">S</button>
    <button class="icon-button medium" id="pen-m">M</button>
    <button class="icon-button" id="pen-l">L</button><br>
    <!-- <button class="fillColorSleevesL" id="fillColorSleevesL">塗りつぶし(袖左)</button>
    <button class="fillColorSleevesR" id="fillColorSleevesR">塗りつぶし(袖右)</button> -->
    <button id="clear">全削除</button><br>
    <button id="buttonSave">保存する</button>
  </div>


      
<script type="text/javascript">
//const fs = require('fs');
var canvas = document.getElementById("canvas");
var ctx = canvas.getContext("2d");
var ctx2 = canvas.getContext("2d");
var ctx3 = canvas.getContext("2d");
ctx.strokeStyle = 'rgb(255,0,0)';//初期描画線の色赤

// Canvas状態の保存
var myStorage = localStorage;
window.onload = initLocalStorage();
var moveflg = 0,
    currentCanvas,
    temp = [];

// Image オブジェクトを生成
var img = new Image();
img.src = "Tshirt.png";

// 画像読み込み終了してから描画
img.onload = function(){
    ctx.drawImage(img, -10, 0, 659, 659);
}


//マウスを操作する
var mouse = {x:0,y:0,x1:0,y1:0,color:"black"};
var draw = false;

var erase = false;

//マウスの座標を取得する
canvas.addEventListener("mousemove",function(e) {
  var rect = e.target.getBoundingClientRect();
  ctx.globalAlpha = 1;

  mouseX = e.clientX - rect.left;
  mouseY = e.clientY - rect.top;

//クリック状態なら描画をする
if(draw === true) {
  if (erase) {
    ctx.globalCompositeOperation = 'destination-out';
    } else {
      ctx.globalCompositeOperation = 'source-over';
    }
    ctx.beginPath();
    ctx.moveTo(mouseX1,mouseY1);
    ctx.lineTo(mouseX,mouseY);
    ctx.lineCap = "round";
    ctx.stroke();
    mouseX1 = mouseX;
    mouseY1 = mouseY;
  }
});

  //クリックしたら描画をOKの状態にする
canvas.addEventListener("mousedown",function(e) {
    ctx.strokeStyle = document.querySelector("#inputColor").value;
    ctx.strokeStyle = document.querySelector("#fillColor").value;
    // ctx.strokeStyle = document.querySelector("#fillColorSleevesL").value;
    // ctx.strokeStyle = document.querySelector("#fillColorSleevesR").value;
    ctx.fillStyle = document.querySelector("#inputColor").value;
    draw = true;
    mouseX1 = mouseX;
    mouseY1 = mouseY;
    undoImage = ctx.getImageData(0, 0,canvas.width,canvas.height);
});

//クリックを離したら、描画を終了する
canvas.addEventListener("mouseup", function(e){
  draw = false;
  ctx.globalCompositeOperation = 'source-over';
  var img2 = new Image();
  img2.src = "Tshirt-shape.png";
  img2.onload = function(){
    ctx.drawImage(img2, -10, 0, 659, 659);
  }
  setLocalStoreage()
});

//ラインの太さ
  $('#pen-s').click(function(e) {
    ctx.lineWidth= 1;
  });
  $('#pen-m').click(function(e) {
    ctx.lineWidth = 5;
  });
  $('#pen-l').click(function(e) {
    ctx.lineWidth = 10;
  });

//消去ボタンを起動する
 $('#clear').click(function(e) {
 		if(!confirm('本当に消去しますか？')) return;
        e.preventDefault();
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(img, -10, 0, 659, 659);
  });

//消しゴムボタンを起動する
$('#eraser').click(function(e) {
  erase = true;
  ctx.globalCompositeOperation = 'destination-out';
});

//色を選択して変更する
$('#inputColor').click(function(e) {
  erase = false;
  ctx.strokeStyle = document.querySelector("#inputColor").value;
});

//塗りつぶし
$('#fillColor').click(function(e) {
  //Tシャツ画像位置
  ctx.moveTo(161, 125);
  ctx.lineTo(63, 190);
  ctx.lineTo(119, 280);
  ctx.lineTo(160, 256);
  ctx.lineTo(160, 556);
  ctx.lineTo(479, 556);
  ctx.lineTo(479, 256);
  ctx.lineTo(520, 280);
  ctx.lineTo(577, 190);
  ctx.lineTo(477, 125);
  ctx.lineTo(369, 102);
  ctx.quadraticCurveTo(319, 127, 270, 102);
  ctx.lineTo(161, 125);

  ctx.fillStyle = document.querySelector("#inputColor").value;
  ctx.fill();

  var img2 = new Image();
    img2.src = "Tshirt-shape.png";
    img2.onload = function(){
      ctx.drawImage(img2, -10, 0, 659, 659);
  }
  setLocalStoreage()
});

//塗りつぶし(袖左)
$('#fillColorSleevesL').click(function(e) {
  ctx.moveTo(58, 195);
  ctx.lineTo(42, 204);
  ctx.lineTo(102, 295);
  ctx.lineTo(114, 284);
  ctx.lineTo(58, 195);
  ctx.fillStyle = document.querySelector("#inputColor").value;
  ctx.fill();

  var img2 = new Image();
    img2.src = "Tshirt-shape.png";
    img2.onload = function(){
      ctx.drawImage(img2, -10, 0, 659, 659);
  }

});

//塗りつぶし(袖右)
$('#fillColorSleevesR').click(function(e) {
  //Tシャツ画像位置
  ctx.moveTo(580, 193);
  ctx.lineTo(597, 205);
  ctx.lineTo(539, 295);
  ctx.lineTo(522, 285);
  ctx.strokeStyle = document.querySelector("#inputColor").value;
  ctx.stroke();
  ctx.fillStyle = document.querySelector("#inputColor").value;
  ctx.fill();

  var img2 = new Image();
    img2.src = "Tshirt-shape.png";
    img2.onload = function(){
      ctx.drawImage(img2, -10, 0, 659, 659);
  }

});

$('#prevCanvas').click(function(e) {
  var logs = JSON.parse(myStorage.getItem("__log"));
 
 if(logs.length > 0) {
    temp.unshift(logs.shift());

    setTimeout(function(){
        myStorage.setItem("__log", JSON.stringify(logs));
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(img, -10, 0, 659, 659);
        // console.log("prev --> ", logs[0]['png']);
        prev_next_draw(logs[0]['png']);

    }, 0);
  } else {
    console.log("初期状態です。");
  }
});

$('#nextCanvas').click(function(e) {
  var logs = JSON.parse(myStorage.getItem("__log"));
 
 if(temp.length > 0) {
    logs.unshift(temp.shift());

    setTimeout(function(){
        myStorage.setItem("__log", JSON.stringify(logs));
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.drawImage(img, -10, 0, 659, 659);
        // console.log("next --> ", logs[0]['png']);
        prev_next_draw(logs[0]['png']);

    }, 0);
 }
});

function initLocalStorage(){
    myStorage.setItem("__log", JSON.stringify([]));
}

function setLocalStoreage(){
  var canvas = document.getElementById('canvas');
  var png = canvas.toDataURL();
  var logs = JSON.parse(myStorage.getItem("__log"));

  setTimeout(function(){
      logs.unshift({png});

      myStorage.setItem("__log", JSON.stringify(logs));

      currentCanvas = 0;
      temp = [];

  }, 0);
}

function prev_next_draw(src) {
    var draw_img = new Image();
    draw_img.src = src;
    draw_img.onload = function() {
      ctx.drawImage(draw_img, 0, 0, 640, 640);
    }
}
// 保存ボタンの処理
$('#buttonSave').click(function(e) {
  const SAVE_URL = 'http://13.113.194.238:443/download';
  var canvas = document.getElementById('canvas');
  var base64 = canvas.toDataURL("image/png");
  let link = document.createElement("a");
  link.href = canvas.toDataURL("image/png");
  link.download = "canvas.png";
  link.click();
  // console.log(base64);
  // 送信情報の設定
  if (base64) {
    // サーバへ送信
    sendServer(base64);
    document.getElementById("buttonSave").href = base64;
    location.replace("http://13.113.194.238:443/analysis");
  }

});

async function sendServer(param) {
  
  return fetch('./download', {
      method: "POST",
      headers: {
        "Content-Type": "application/json; charset=utf-8"
      },
      body: JSON.stringify({
        data: param
      })
    }).then((response) => response.json());
}

function hex2rgb ( hex ) {
	if ( hex.slice(0, 1) == "#" ) hex = hex.slice(1) ;
	if ( hex.length == 3 ) hex = hex.slice(0,1) + hex.slice(0,1) + hex.slice(1,2) + hex.slice(1,2) + hex.slice(2,3) + hex.slice(2,3) ;

	var hex =  [ hex.slice( 0, 2 ), hex.slice( 2, 4 ), hex.slice( 4, 6 ) ].map( function ( str ) {
		return parseInt( str, 16 ) ;
  } ) ;
  
  return 'rgb' + '(' + hex[0] + ',' + hex[1] + ',' + hex[2] + ')';
}

(function($) {

/**
 * Main color picker function.
 */
$.fn.colorpicker = function(options) {
  options = $.extend({}, $.fn.colorpicker.defaults, options);

  // Inverts a hex-color
  var colorInvert = function(colorHex) {
    var r = colorHex.substr(0, 2);
    var g = colorHex.substr(2, 2);
    var b = colorHex.substr(4, 2);

    return 0.212671 * r + 0.715160 * g + 0.072169 * b < 0.5 ? 'ffffff' : '000000'
  };

  var dialog = $('#colorpicker');
  if (!dialog.length) {
    dialog = $('<div id="colorpicker"></div>').appendTo(document.body).hide();
  }

  // Remove the color-picker if you click outside it
  $(document).click(function(event) {
    if (!($(event.target).is('#colorpicker') || $(event.target).parents('#colorpicker').length)) {
      dialog.hide(options.delay);
    }
  });

  // For HTML element passed to the plugin
  return this.each(function() {
    var element = $(this);

    // Build the list of colors
    // <li><a href="#" style="background-color: #111fff;">111fff</a></li>
    var colorList = '';
    $.each(options.colors, function(index, color) {
      colorList += '<li><a href="#" style="background-color: #' + color + ';">' + color + '</a></li>';
    });

    // When you click on the HTML element
    element.click(function() {
      // Show the dialog next to the HTML element
      var elementPos = element.offset();
      dialog.html('<ul>' + colorList + '</ul>').css({
        position: 'absolute',
        left: elementPos.left,
        top: elementPos.top + element.outerHeight()
      }).show(options.delay);

      // When you click on a color inside the dialog
      $('a', dialog).click(function() {
        // The color is stored in the link's value
        var color = $(this).text();
        var new_color = '#' + color;

        document.querySelector("#inputColor").value = new_color;
        console.log("これが色",new_color);
        ctx.strokeStyle = new_color;

        // Change the input's background color to reflect the newly selected color
        element.css({
          'background-color': '#' + color,
          color: '#' + colorInvert(color)
        });

        element.trigger({
          type: 'changeColor',
          color: '#' + color
        });

        // Hide the color-picker and return false
        dialog.hide(options.delay);

        return false;
      });

      return false;
    });
  });
};

/**
 * Default color picker options.
 */
$.fn.colorpicker.defaults = {
  // Default colors for the picker
  colors: [
    // Colors from Google Calendar
    '000000', // Black
    '7BD148', // Green
    '5484ED', // Bold blue
    'A4BDFC', // Blue
    '46D6DB', // Turquoise
    '7AE7BF', // Green
    '51B749', // Bold green
    'FBD75B', // Yellow
    'FFB878', // Orange
    'FF887C', // Red
    'DC2127', // Bold red
    'DBADFF', // Purple
    'E1E1E1', // Gray
  ],

  // Animation delay for the dialog
  delay: 0
};

})(jQuery);
$(document).ready(function () {
  $('#warm-color').colorpicker({
    colors: [
      "C7000B",
      "CB4829",
      "CF7250",
      "F39800",
      "D4987E",
      "530000",
      "FCD7A1",
      "FFFCDB"
    ]
  });
  $('#cold-color').colorpicker({
    colors: [
      "336600",
      "66CC00",
      "99FF00",
      "CCFF66",
      "006666",
      "00CCCC",
      "00FFFF",
      "66FFFF"
    ]
  });
});

</script>
</body>
</html>

